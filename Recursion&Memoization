"""WAP to find the Factorial of a number"""
#Type 1 using for and while loop:
def factorial(n):
    f=1
    for i in range(1,n+1):
        f=f*i
    print(f)
def fact(n):
    i=1
    f=1
    while(i<=n):
        f=f*i
        i=i+1
    print(f)


"""WAP to find the Factorial of a number"""
#Type 2 using Recursion:
def factorial(n):
    if(n==1):
        return 1
    if(n>=2):
        return (n*factorial(n-1))
    
for i in range(1,1000):
    print(i,":",factorial(i))

"""WAP to find the Factorial of a number"""
#Type 2 using Memoization:
##In memoization we have two ways:
factorial_cache={}
def factorial(n):
    if (n==1):
        return 1
    if (n>=2):
        factorial_cache[n]=n*factorial(n-1)
        return(factorial_cache[n])

#Or we can use Least Recently used as imported by functools module
from functools import lru_cache
@lru_cache(maxsize=1001)
def factorial(n):
    if(n==1):
        return 1
    if(n>=2):
        return (n*factorial(n-1))
    
for i in range(1,1000):
    print(i,":",factorial(i))

#------------------------------------------------------------------------------#

"""WAP to print the Fibonacci series """
#Type 1 using for and while loop:
def fibonacci(n):
    x=1
    y=1
    for i in range(1,n+1):
        print(i,":",x)
        z=x+y
        x=y
        y=z

##def fibo(n):
    i=1
    x=1
    y=1
    while(i<=n):
        print(i,"-",x)
        z=x+y
        x=y
        y=z
        i=i+1



"""WAP to  print the Fibonacci series"""
#Type 2 using Recursion:
def fibonacci(n):
    if(n==1):
        return 1
    elif(n==2):
        return 1
    else:
        return (fibonacci(n-1)+fibonacci(n-2))
    
for i in range(1,21):#here if you try range from 1-501 you will experience 
    print(i,"-->",fibonacci(i))#the processing is very slow



"""WAP to  print the Fibonacci series"""
#Type 2 using Memoization:
#In memoization we have two ways:
fibonacci_cache={}
def fibonacci(n):
    if(n==1):
        return 1
    if (n==2):
        return 1
    else:
        fibonacci_cache[n]=fibonacci(n-1)+fibonacci(n-2)
        return(fibonacci_cache[n])
    
for i in range(1,21): 
    print(i,"--->",fibonacci(i))







#Or we can use Least Recently used as imported by functools module
from functools import lru_cache
@lru_cache(maxsize=1001)
def fibonacci(n):
    if(n==1):
        return 1
    elif(n==2):
        return 1
    else:
        return (fibonacci(n-1)+fibonacci(n-2))

for i in range(1,21): 
    print(i,"==>",fibonacci(i))


















    
